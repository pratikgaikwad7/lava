<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/style/view_admin_data.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    
    <!-- Chart placeholder styles -->
    <style>
        .chart-placeholder {
            position: relative;
            width: 100%;
            height: 300px;
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 4px;
        }
        
        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        .chart-loading-text {
            color: #666;
            font-weight: 500;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
            cursor: pointer; /* Add hand cursor to indicate clickable charts */
        }
        
        .chart-container canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100% !important;
            height: 100% !important;
        }
        
        /* For charts that need different heights */
        .chart-placeholder.tall {
            height: 400px;
        }
        
        .chart-container.tall {
            height: 400px;
        }
        
        /* Modal styles for enlarged charts */
        .modal-xl .chart-container.large {
            height: 70vh;
            min-height: 500px;
        }
        .modal-xl .chart-container.large canvas {
            max-height: 100% !important;
        }
        /* Ensure modal is properly sized */
        .modal-xl {
            max-width: 95%;
        }
        @media (max-width: 768px) {
            .modal-xl {
                max-width: 100%;
                margin: 0;
            }
            
            .modal-xl .chart-container.large {
                height: 60vh;
            }
        }
               .modal-open .filter-control-area {
  display: none !important;
}
        /* Adherence color classes */
        .adherence-low {
            color: #e74c3c; /* Red */
        }
        .adherence-amber {
            color: #f39c12; /* Amber */
        }
        .adherence-high {
            color: #27ae60; /* Green */
        }
    </style>
</head>
<body>
  {% include 'user/navbar.html' %}
    <div id="main"> 
    <div class="snap-container">
                      

<section class="snap-section">
    <!-- Unified Filter Control Area -->
    <div class="filter-control-area" id="filterControlArea">
        <!-- Filter Toggle Button -->
        <button class="filter-toggle-btn" id="filterToggleBtn" title="Toggle Filters">
            <i class="fas fa-filter"></i>
        </button>
        
        <!-- Filter Label Container (now clickable) -->
        <div class="filter-label-container" id="filterLabelContainer">
            <i class="fas fa-filter"></i>
            <div class="filter-label-text">Choose Filter</div>
        </div>
        
        <!-- Applied Filters Strip -->
        <div class="applied-filters-strip" id="applied-filters">
            <div class="applied-filters-container"> 
                <span class="applied-filters-title">Applied Filters:</span>
                <div class="applied-filters-list" id="appliedFiltersList"></div>
            </div>
            <!-- Date container styled like applied filters -->
            <div class="updated-date-container">
                <span id="current-date" class="date-display"></span>
            </div>
        </div>    
        <!-- Legend integrated into the strip -->
        <div class="strip-legend">
            <div class="legend-item">
                <div class="legend-box red-box"></div>
                <span class="legend-text">Less than 60%</span>
            </div>
            <div class="legend-item">
                <div class="legend-box amber-box"></div>
                <span class="legend-text">61% to 90%</span>
            </div>
            <div class="legend-item">
                <div class="legend-box green-box"></div>
                <span class="legend-text">More than 90%</span>
            </div>
        </div>
    </div>
    
    <!-- Side Panel for Filters -->
    <div class="filter-side-panel" id="filterSidePanel">
        <div class="filter-panel-header">
            <h3>Filters</h3>
        </div>
        
        <!-- Filter Actions (Fixed at top) -->
        <div class="filter-panel-actions">
            <button type="submit" form="filterForm" class="btn btn-primary btn-lg w-100 mb-2">
                <i class="fas fa-filter me-2"></i>Apply Filters
            </button>
            <a href="{{ url_for('user_tech_bp.view_master_data') }}" class="btn btn-outline-secondary btn-lg w-100 mb-2">
                <i class="fas fa-sync-alt me-2"></i>Reset
            </a>
            <a href="{{ url_for('user_tech_bp.download_excel') }}?{{ request.query_string.decode('utf-8') }}" 
               class="btn btn-success btn-lg w-100">
                <i class="fas fa-file-excel me-2"></i>Export Excel
            </a>
        </div>
        
        <!-- Scrollable Filter Content -->
        <div class="filter-panel-content">
            <form method="get" action="{{ url_for('user_tech_bp.view_master_data') }}" id="filterForm">
                <input type="hidden" name="page" value="1">
                
                <!-- Filter Fields -->
                <div class="filter-group">
                    <div class="filter-col">
                        <div class="filter-label">PER No</div>
                        <div class="input-with-icon">
                            <input type="text" class="form-control" name="per_no" value="{{ filters.per_no if filters.per_no }}" placeholder="Enter PER number">
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">BC No</div>
                        <div class="input-with-icon">
                            <input type="text" class="form-control" name="bc_no" value="{{ filters.bc_no if filters.bc_no }}" placeholder="Enter BC number">
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">Gender</div>
                        <select class="form-select" name="gender">
                            <option value="All">All Genders</option>
                            {% for gender in gender_options %}
                                <option value="{{ gender }}" {% if filters.gender == gender %}selected{% endif %}>{{ gender }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                <div class="filter-label">Factory</div>
                <select class="form-select" name="factory" id="factoryFilter"
                    {% if session.get('role') in ["Factory Head", "PSD", "Shop Floor Training Coordinators"] %} disabled {% endif %}>
                    <option value="">All Factories</option>
                    {% for factory in Constants.FACTORY_LOCATIONS %}
                        <option value="{{ factory }}"
                            {% if session.get('role') in ["Factory Head", "PSD", "Shop Floor Training Coordinators"] 
                                and session.get('factory_location') == factory %} selected {% endif %}
                            {% if filters.factory == factory %}selected{% endif %}>
                            {{ factory }}
                        </option>
                    {% endfor %}
                </select>
                {% if session.get('role') in ["Factory Head", "PSD", "Shop Floor Training Coordinators"] %}
                    <input type="hidden" name="factory" value="{{ session.get('factory_location') }}">
                {% endif %}
            </div>
                
                <div class="filter-group">
                    <div class="filter-col">
                        <div class="filter-label">Employee Group</div>
                        <select class="form-select" name="employee_group">
                            <option value="">All Groups</option>
                            {% for group in employee_group_options %}
                                <option value="{{ group }}" {% if filters.employee_group == group %}selected{% endif %}>{{ group }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">TNI/NON-TNI Status</div>
                        <select class="form-select" name="tni_status" id="tni_status">
                            <option value="">All Statuses</option>
                            {% for status in tni_options %}
                                <option value="{{ status }}" {% if filters.tni_status == status %}selected{% endif %}>{{ status }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">Training Name</div>
                        <select class="form-select" name="training_name">
                            <option value="">All Trainings</option>
                            {% for training in training_options %}
                                <option value="{{ training }}" {% if filters.training_name == training %}selected{% endif %}>{{ training }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">Calendar Month</div>
                        <select class="form-select" name="calendar_month">
                            <option value="">All Months</option>
                            {% for month in all_months %}
                                <option value="{{ month }}" {% if filters.calendar_month == month %}selected{% endif %}>{{ month }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                
                <div class="filter-group">
                    <div class="filter-col">
                        <div class="filter-label">PMO Month (21-20)</div>
                        <select class="form-select" name="month_report_pmo_21_20">
                            <option value="">All</option>
                            {% for month in all_months %}
                                <option value="{{ month }}" {% if filters.month_report_pmo_21_20 == month %}selected{% endif %}>{{ month }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">CD Month (26-25)</div>
                        <select class="form-select" name="month_cd_key_26_25">
                            <option value="">All</option>
                            {% for month in all_months %}
                                <option value="{{ month }}" {% if filters.month_cd_key_26_25 == month %}selected{% endif %}>{{ month }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">PL Category</div>
                        <select class="form-select" name="pl_category">
                            <option value="All">All Categories</option>
                            {% for pl in pl_category_options %}
                                <option value="{{ pl }}" {% if filters.pl_category == pl %}selected{% endif %}>{{ pl }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">PMO/SHE Category</div>
                        <select class="form-select" name="pmo_training_category">
                            <option value="All">All Categories</option>
                            {% for category in pmo_training_category_options %}
                                <option value="{{ category }}" {% if filters.pmo_training_category == category %}selected{% endif %}>{{ category }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                
                <div class="filter-group">
                    <div class="filter-col">
                        <div class="filter-label">Month Range</div>
                        <div class="range-group">
                            <select class="form-select" name="month_range_start">
                                <option value="">From</option>
                                {% for month in all_months %}
                                    <option value="{{ month }}" {% if filters.month_range_start == month %}selected{% endif %}>{{ month }}</option>
                                {% endfor %}
                            </select>
                            <select class="form-select" name="month_range_end">
                                <option value="">To</option>
                                {% for month in all_months %}
                                    <option value="{{ month }}" {% if filters.month_range_end == month %}selected{% endif %}>{{ month }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">Date Range</div>
                        <div class="range-group">
                            <input type="text" class="form-control datepicker" name="start_date" id="start_date" placeholder="Start Date" value="{{ filters.start_date if filters.start_date }}">
                            <input type="text" class="form-control datepicker" name="end_date" id="end_date" placeholder="End Date" value="{{ filters.end_date if filters.end_date }}">
                        </div>
                    </div>
                    
                    <div class="filter-col">
                        <div class="filter-label">Fiscal Year</div>
                        <select class="form-select" name="fiscal_year">
                            {% for year in fiscal_year_options %}
                                <option value="{{ year }}" {% if filters.fiscal_year == year|string %}selected{% endif %}>FY {{ year }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<!-- Tab Navigation -->
<div class="tab-navigation">
    <ul class="nav nav-tabs" id="myTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="graphs-tab" data-bs-toggle="tab" data-bs-target="#graphs" type="button" role="tab" aria-controls="graphs" aria-selected="true">
                <i class="fas fa-chart-bar me-2"></i>Charts
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="counts-tab" data-bs-toggle="tab" data-bs-target="#counts" type="button" role="tab" aria-controls="counts" aria-selected="false">
                <i class="fas fa-calculator me-2"></i>Metrics
            </button>
        </li>
    </ul>
</div>

<div class="tab-content" id="myTabContent">
    <!-- Graphs Tab (Page 3 Content) -->
    <div class="tab-pane fade show active" id="graphs" role="tabpanel" aria-labelledby="graphs-tab">
        <section class="snap-section" id="page3">
            <!-- Main Dashboard Container -->
            <div class="dashboard-container">
                <!-- First Section: 100vh Box -->
                <div class="dashboard-section" style="height: 100vh;">
                    <!-- First Row: 3 Charts -->
                    <div class="charts-row">
                        <!-- EOR Count by Employee Category -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>EOR Count by Male/Female</h3>
                                <button class="filter-toggle" data-target="filterEOR">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <!-- Filter panel -->
                            <div class="filter-panel" id="filterEOR">
                                <h3>Employee Category Filters</h3>
                                <input type="text" id="searchEOR" placeholder="Search category...">
                                <div class="filter-buttons">
                                    <button id="selectAllEOR">Select All</button>
                                    <button id="clearAllEOR">Clear All</button>
                                </div>
                                <div id="filterOptionsEOR" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterEOR">Apply</button>
                            </div>
                            <div class="chart-container" id="chartEOR-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Employee Distribution by Group -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>Employee Distribution by Group</h3>
                            </div>
                            <div class="chart-container" id="employeeGroupChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Unique Learners vs Live EOR -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3> Permanent technician vs Unique Learners</h3>
                            </div>
                            <div class="chart-container" id="ulEorChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Second Row: 3 Charts -->
                    <div class="charts-row">
                        <!-- Annual Coverage -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>TNI YTD (Year Till Date) Status</h3>
                            </div>
                            <div class="chart-container" id="annualYtdChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 16-Hour Completion Adherence -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>16+ Learning hours compliance YTD Status</h3>
                            </div>
                            <div class="chart-container" id="16HourChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- SHE (Safety+Health) Hours Breakdown -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>6+ Safety Learning hours compliance YTD Status</h3>
                            </div>
                            <div class="chart-container" id="sheStackedChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Second Section: 50vh Box with 3 PL Charts -->
                <div class="dashboard-section" style="height: 50vh;">
                    <div class="charts-row">
                        <!-- PL1 Category Metrics -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>PL1 YTD Status</h3>
                            </div>
                            <div class="chart-container" id="pl1Chart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- PL2 Category Metrics -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>PL2 YTD Status</h3>
                            </div>
                            <div class="chart-container" id="pl2Chart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- PL3 Category Metrics -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>PL3 YTD Status</h3>
                            </div>
                            <div class="chart-container" id="pl3Chart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Third Section Part 1: 80vh Box for Month-wise Chart -->
                <div class="dashboard-section" style="height: 80vh;">
                    <div class="charts-row">
                        <div class="graph-card full-width">
                            <div class="graph-header">
                                <h3>TNI Month-wise YTD Plan vs ActualCoverage vs Adherence</h3>
                            </div>
                            <div class="chart-container" id="monthwiseYTDChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Third Section Part 2: 65vh Box for SHE and PMO Charts -->
                <div class="dashboard-section" style="height: 65vh;">
                    <div class="charts-row">
                        <!-- SHE Category Coverage YTD -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>Annual Safety Coverage Status</h3>
                            </div>
                            <div class="chart-container" id="sheCategoryChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- PMO Category Coverage YTD -->
                        <div class="graph-card">
                            <div class="graph-header">
                                <h3>Annual PMO Category Coverage Status</h3>
                            </div>
                            <div class="chart-container" id="pmoCategoryChart-container">
                                <div class="chart-placeholder">
                                    <span class="chart-loading-text">Loading chart...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Fourth Section: Remaining 6 Charts in 2x3 Grid -->
                <div class="dashboard-section" style="height: auto; padding-bottom: 30px;">
                    <div class="charts-grid-2x3">
                        <!-- Row 1: 2 Charts -->
                        <!-- CESS Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3>Annual CESS Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterCESS">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterCESS">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchCESS" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllCESS">Select All</button>
                                    <button id="clearAllCESS">Clear All</button>
                                </div>
                                <div id="filterOptionsCESS" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterCESS">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartCESS-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Digital Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3>Annual Digital Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterDigital">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterDigital">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchDigital" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllDigital">Select All</button>
                                    <button id="clearAllDigital">Clear All</button>
                                </div>
                                <div id="filterOptionsDigital" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterDigital">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartDigital-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Row 2: 2 Charts -->
                        <!-- Functional Skills Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3> Annual Functional Skills Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterFS">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterFS">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchFS" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllFS">Select All</button>
                                    <button id="clearAllFS">Clear All</button>
                                </div>
                                <div id="filterOptionsFS" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterFS">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartFS-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Professional Skills Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3>Annual Professional Skills Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterPS">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterPS">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchPS" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllPS">Select All</button>
                                    <button id="clearAllPS">Clear All</button>
                                </div>
                                <div id="filterOptionsPS" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterPS">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartPS-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Row 3: 2 Charts -->
                        <!-- SHE Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3> Annual Safety Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterSHE">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterSHE">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchSHE" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllSHE">Select All</button>
                                    <button id="clearAllSHE">Clear All</button>
                                </div>
                                <div id="filterOptionsSHE" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterSHE">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartSHE-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Sustainability Chart -->
                        <div class="chart-section">
                            <div class="chart-title">
                                <h3>Annual Sustainability Training Coverage Status</h3>
                                <button class="filter-toggle" data-target="filterSust">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                            </div>
                            <div class="filter-panel" id="filterSust">
                                <h3>Training Filters</h3>
                                <input type="text" id="searchSust" placeholder="Search training...">
                                <div class="filter-buttons">
                                    <button id="selectAllSust">Select All</button>
                                    <button id="clearAllSust">Clear All</button>
                                </div>
                                <div id="filterOptionsSust" style="overflow-y:auto; flex-grow:1;"></div>
                                <button class="apply-filter" data-target="filterSust">Apply</button>
                            </div>
                            <div class="chart-box">
                                <div class="chart-container" id="chartSust-container">
                                    <div class="chart-placeholder">
                                        <span class="chart-loading-text">Loading chart...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

    
    <!-- Counts Tab (Page 2 Content) -->
    <div class="tab-pane fade" id="counts" role="tabpanel" aria-labelledby="counts-tab">
        <section class="snap-section" id="page2">

        
            <div class="metrics-scroll-container">
                <div class="metrics-container">
                    <!-- 1. TNI Metrics Card (moved to first position) -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-share-alt"></i></div>
                                    <h5 class="metric-card-text-title">Factories TNI
                                        <button class="btn btn-xs btn-outline-primary ms-2" onclick="downloadTNIReport('tni_shared')">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.tni_metrics.tni_total_count }}</h2>
                                    <p class="metric-desc">Total TNI shared by factories</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-check-circle"></i></div>
                                    <h5 class="metric-card-text-title">Coverage Against TNI
                                        <button class="btn btn-xs btn-outline-primary ms-2" onclick="downloadTNIReport('matched')">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.tni_metrics.matched_count }}</h2>
                                    <p class="metric-desc">Attended as shared</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-balance-scale"></i></div>
                                    <h5 class="metric-card-text-title">Factory TNI Balance
                                        <button class="btn btn-xs btn-outline-primary ms-2" onclick="downloadTNIReport('remaining')">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.tni_metrics.remaining_count }}</h2>
                                    <p class="metric-desc">Remaining participants</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-percentage"></i></div>
                                    <h5 class="metric-card-text-title">TNI Shared % Adherence</h5>
                                    {% set tni_total = dashboard_metrics.tni_metrics.tni_total_count %}
                                    {% set tni_covered = dashboard_metrics.tni_metrics.matched_count %}
                                    {% if tni_total > 0 %}
                                        {% set tni_percentage = (tni_covered / tni_total) * 100 %}
                                        <h2 class="display-5
                                            {% if tni_percentage < 60 %}
                                                adherence-low
                                            {% elif tni_percentage <= 90 %}
                                                adherence-amber
                                            {% else %}
                                                adherence-high
                                            {% endif %}
                                        ">
                                            {{ "%.1f"|format(tni_percentage) }}%
                                        </h2>
                                    {% else %}
                                        <h2 class="display-5 adherence-low">0.0%</h2>
                                    {% endif %}
                                    <p class="metric-desc">TNI adherence to plan</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 2. Annual Targets Card -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-bullseye"></i></div>
                                    <h5 class="metric-card-text-title">SDC Annual Target</h5>
                                    <h2 class="display-5">{{ dashboard_metrics.target_metrics.target }}</h2>
                                    <p class="metric-desc">Total target TNI participants</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-calculator"></i></div>
                                    <h5 class="metric-card-text-title">SDC Annual Balance</h5>
                                    <h2 class="display-5">
                                        {{ [dashboard_metrics.target_metrics.target - dashboard_metrics.participant_count, 0] | max }}
                                    </h2>
                                    <p class="metric-desc">Remaining to achieve target</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-percent"></i></div>
                                    <h5 class="metric-card-text-title">Annual Adherence %</h5>
                                    {% set annual_total = dashboard_metrics.target_metrics.target %}
                                    {% set annual_adherence = ((dashboard_metrics.ytd_metrics.ytd_actual / annual_total) * 100) if annual_total > 0 else 0 %}
                                    <h2 class="display-5
                                        {% if annual_adherence < 60 %}
                                            adherence-low
                                        {% elif annual_adherence <= 90 %}
                                            adherence-amber
                                        {% else %}
                                            adherence-high
                                        {% endif %}
                                    ">
                                        {{ "%.1f"|format(annual_adherence) }}%
                                    </h2>
                                    <p class="metric-desc">Target achievement</p>
                                </div>
                                <div class="metric-subcard">
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 3. YTD Performance Card -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-flag"></i></div>
                                    <h5 class="metric-card-text-title">Target YTD Plan </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.ytd_metrics.ytd_target }}</h2>
                                    <p class="metric-desc">Current year target</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-chart-line"></i></div>
                                    <h5 class="metric-card-text-title">Actual YTD Coverage
                                        <button class="btn btn-xs btn-outline-primary ms-2" onclick="downloadReport('participant')">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.ytd_metrics.ytd_actual }}</h2>
                                    <p class="metric-desc">Covered participants</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-exclamation-triangle"></i></div>
                                    <h5 class="metric-card-text-title">Backlog YTD Target</h5>
                                    <h2 class="display-5">{{ dashboard_metrics.ytd_metrics.balance }}</h2>
                                    <p class="metric-desc">Remaining participants</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-percentage"></i></div>
                                    <h5 class="metric-card-text-title">YTD Adherence %</h5>
                                    {% set ytd_adherence = dashboard_metrics.ytd_metrics.percentage_adherence %}
                                    <h2 class="display-5
                                        {% if ytd_adherence < 60 %}
                                            adherence-low
                                        {% elif ytd_adherence <= 90 %}
                                            adherence-amber
                                        {% else %}
                                            adherence-high
                                        {% endif %}
                                    ">
                                        {{ "%.1f"|format(ytd_adherence) }}%
                                    </h2>
                                    <p class="metric-desc">Target achievement</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 4. Unique Learners Card -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-users"></i></div>
                                    <h5 class="metric-card-text-title">
                                        Live EOR Count
                                        <a href="{{ url_for('user_tech_bp.download_eor_data', factory=filters.factory, fiscal_year=filters.fiscal_year) }}" 
                                           class="btn btn-xs btn-outline-primary ms-2">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.eor_count }}</h2>
                                    <p class="metric-desc">Total number of employees</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-user-check"></i></div>
                                    <h5 class="metric-card-text-title">Unique Learners
                                        <a href="{{ url_for('user_tech_bp.download_unique_learners') }}?{{ request.query_string.decode('utf-8') }}" 
                                           class="btn btn-xs btn-outline-primary ms-2">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.unique_learners }}</h2>
                                    <p class="metric-desc">Permanent employees trained</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-hourglass-half"></i></div>
                                    <h5 class="metric-card-text-title">Pending Learners
                                        <a class="btn btn-xs btn-outline-primary ms-2"
                                        href="{{ url_for('user_tech_bp.download_pending_eor', factory=filters.factory, fiscal_year=filters.fiscal_year) }}">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.pending_eor_count }}</h2>
                                    <p class="metric-desc">Employees pending training</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-percentage"></i></div>
                                    <h5 class="metric-card-text-title">UL Adherence %</h5>
                                    {% if dashboard_metrics.eor_count > 0 %}
                                        {% set ul_adherence = (dashboard_metrics.unique_learners / dashboard_metrics.eor_count) * 100 %}
                                        <h2 class="display-5
                                            {% if ul_adherence < 60 %}
                                                adherence-low
                                            {% elif ul_adherence <= 90 %}
                                                adherence-amber
                                            {% else %}
                                                adherence-high
                                            {% endif %}
                                        ">
                                            {{ "%.1f"|format(ul_adherence) }}%
                                        </h2>
                                    {% else %}
                                        <h2 class="display-5 adherence-low">0.0%</h2>
                                    {% endif %}
                                    <p class="metric-desc">Target achievement</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 5. Learning Hours Card (with 4 fields) -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-clock"></i></div>
                                    <h5 class="metric-card-text-title">Learning Hours cumulative</h5>
                                    <h2 class="display-5">{{ dashboard_metrics.learning_hours }}</h2>
                                    <p class="metric-desc">Total training hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-shield-alt"></i></div>
                                    <h5 class="metric-card-text-title">
                                        SHE 6+ Hours
                                        <a href="{{ url_for('user_tech_bp.download_she_6plus_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2" title="Download SHE 6+ Hours">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.she_6plus_count }}</h2>
                                    <p class="metric-desc">Employees with 6+ SHE hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-briefcase"></i></div>
                                    <h5 class="metric-card-text-title">
                                        PMO 10+ Hours
                                        <a href="{{ url_for('user_tech_bp.download_pmo_10plus_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2" title="Download PMO 10+ Hours">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.pmo_10plus_count }}</h2>
                                    <p class="metric-desc">Employees with 10+ PMO hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-check-circle"></i></div>
                                    <h5 class="metric-card-text-title">
                                        Completed 16 Hours with Safety 
                                        <a href="{{ url_for('user_tech_bp.download_completed_16_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2" title="Download Completed 16 Hours">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.completed_16_count }}</h2>
                                    <p class="metric-desc">SHE 6+ & PMO 10+ hours</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 6. Additional Hours Metrics Card -->
                    <div class="metric-card tall-card">
                        <div class="card-body p-0">
                            <div class="metric-subcard-container">
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-shield-alt"></i></div>
                                    <h5 class="metric-card-text-title">
                                        SHE Below 6 Hours
                                        <a href="{{ url_for('user_tech_bp.download_she_below_6_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2" title="Download SHE Below 6 Hours">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.she_below_6_count }}</h2>
                                    <p class="metric-desc">Employees with <6 SHE hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-briefcase"></i></div>
                                    <h5 class="metric-card-text-title">
                                        PMO Below 10 Hours
                                        <a href="{{ url_for('user_tech_bp.download_pmo_below_10_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2" title="Download PMO Below 10 Hours">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.pmo_below_10_count }}</h2>
                                    <p class="metric-desc">Employees with <10 PMO hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-chart-line"></i></div>
                                    <h5 class="metric-card-text-title">
                                        Cumulative 16+ Hours
                                        <a class="btn btn-xs btn-outline-primary ms-2"
                                           href="{{ url_for('user_tech_bp.download_cumulative_16plus_hours', **request.args) }}" 
                                           title="Download Cumulative 16+ Hours Report">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.cumulative_16plus_count }}</h2>
                                    <p class="metric-desc">Employees with SHE+PMO ≥ 16 hours</p>
                                </div>
                                <div class="metric-subcard">
                                    <div class="metric-icon"><i class="fas fa-hourglass-half"></i></div>
                                    <h5 class="metric-card-text-title">
                                        Pending 16 Hours
                                        <a href="{{ url_for('user_tech_bp.download_incomplete_16_hours', **request.args) }}" 
                                        class="btn btn-xs btn-outline-primary ms-2">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </h5>
                                    <h2 class="display-5">{{ dashboard_metrics.hours_metrics.below_16_count }}</h2>
                                    <p class="metric-desc">Employees with <16 hours</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>


<section class="snap-section" id="page4">
    <!-- Centered Table Toggle Button -->
    <div class="table-toggle-container centered">
        <button id="toggleTableBtn" class="btn btn-outline-primary toggle-btn-centered">
            <i class="fas fa-eye-slash me-2"></i>Show Table Data
        </button>
    </div>
    
    <div class="table-container" id="resultsTable">
        {% if records %}
            <div class="table-responsive">
                <table class="table table-bordered table-hover align-middle">
                    <thead class="table-header">
                        <tr>
                            {% if column_headings %}
                                {% for col in column_headings.values() %}
                                    <th scope="col">{{ col }}</th>
                                {% endfor %}
                            {% endif %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in records %}
                            <tr>
                                {% for key in column_headings.keys() %}
                                    <td class="
                                        {% if key in ['per_no', 'sr_no'] %}column-id
                                        {% elif key in ['participants_name'] %}column-employee
                                        {% elif key in ['start_date', 'end_date'] %}column-date
                                        {% elif key in ['tni_status', 'program_type'] %}column-status
                                        {% elif key in ['day_1_attendance', 'day_2_attendance', 'day_3_attendance'] %}column-center
                                        {% elif key in ['learning_hours', 'attended_days'] %}column-number
                                        {% endif %}
                                        {% if key == 'sr_no' %}sticky-column{% endif %}
                                    ">
                                        {% if key in ['day_1_attendance', 'day_2_attendance', 'day_3_attendance'] %}
                                            <span class="{{ 'attendance-yes' if row[key] == 'Yes' else 'attendance-no' }}">
                                                {{ row[key] if row[key] is not none else 'No' }}
                                            </span>
                                        {% elif key == 'attended_days' %}
                                            <span class="badge-attended">
                                                {{ row[key] }} day{{ 's' if row[key] and row[key] > 1 else '' }}
                                            </span>
                                        {% elif key == 'learning_hours' %}
                                            {{ row[key] }} hrs
                                        {% elif key in ['start_time', 'end_time'] %}
                                            {{ row[key] if row[key] else '-' }}
                                        {% else %}
                                            {{ row[key] if row[key] is not none else '-' }}
                                        {% endif %}
                                    </td>
                                {% endfor %}
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            {% if total_pages > 1 %}
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    {% if current_page > 1 %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('user_tech_bp.view_master_data', page=current_page-1, **filters) }}">Previous</a>
                    </li>
                    {% endif %}
                    
                    {% for page_num in range(1, total_pages+1) %}
                    <li class="page-item {% if page_num == current_page %}active{% endif %}">
                        <a class="page-link" href="{{ url_for('user_tech_bp.view_master_data', page=page_num, **filters) }}">{{ page_num }}</a>
                    </li>
                    {% endfor %}
                    
                    {% if current_page < total_pages %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('user_tech_bp.view_master_data', page=current_page+1, **filters) }}">Next</a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
            {% endif %}
        {% else %}
            <div class="empty-state">
                <h4>No records found</h4>
                <p>Try adjusting your filters or search criteria</p>
            </div>
        {% endif %}
    </div>
</section>
</div>
</div>
</div>
<!-- Chart Modal -->
<div class="modal fade" id="chartModal" tabindex="-1" aria-labelledby="chartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="chartModalLabel">Chart Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="chart-container large">
                    <canvas id="enlargedChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
    // Download functions
    function downloadReport(type) {
        const queryString = window.location.search;
        let downloadUrl;
        if (type === "participant") {
            downloadUrl = "{{ url_for('user_tech_bp.download_excel') }}" + queryString;
        } else if (type === "unique") {
            downloadUrl = "{{ url_for('user_tech_bp.download_unique_learners') }}" + queryString;
        }
        window.location.href = downloadUrl;
    }
    
    function downloadTNIReport(type) {
        const queryString = window.location.search;
        let downloadUrl;
        if (type === "matched") {
            downloadUrl = "{{ url_for('user_tech_bp.download_tni_matched') }}" + queryString;
        } else if (type === "remaining") {
            downloadUrl = "{{ url_for('user_tech_bp.download_tni_remaining') }}" + queryString;
        } else if (type === "tni_shared") {
            downloadUrl = "{{ url_for('user_tech_bp.download_tni_shared') }}" + queryString;
        }
        window.location.href = downloadUrl;
    }
</script>
<!-- Lazy loading script for charts -->
<script>
    // Function to load external scripts dynamically
    function loadScript(src, async = true, defer = true) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.async = async;
            script.defer = defer;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    // Function to initialize all charts after libraries are loaded
    async function initializeCharts() {
        try {
            // Load Chart.js and plugins
            await loadScript('https://cdn.jsdelivr.net/npm/chart.js');
            await loadScript('https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2');
            await loadScript('https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0');
            
            // Now that all libraries are loaded, initialize charts
            initializeAllCharts();
        } catch (error) {
            console.error('Error loading chart libraries:', error);
            // Show error message in chart placeholders
            document.querySelectorAll('.chart-placeholder').forEach(placeholder => {
                placeholder.innerHTML = '<span class="chart-loading-text">Error loading charts</span>';
            });
        }
    }
    
    // Function to replace placeholder with actual chart
    function replacePlaceholderWithChart(containerId, canvasId) {
        const container = document.getElementById(containerId);
        container.innerHTML = `<canvas id="${canvasId}"></canvas>`;
        return document.getElementById(canvasId).getContext('2d');
    }
    
// ✅ Helper: Deep clone chart config while preserving plugin functions
function cloneConfig(config) {
    return {
        type: config.type,
        data: structuredClone(config.data),          // safe deep clone for datasets
        options: { ...config.options },              // shallow copy keeps functions
        plugins: config.plugins ? [...config.plugins] : [] // preserve plugins array
    };
}

// Function to create a chart with click handler
function createChartWithClickHandler(ctx, config, modalTitle) {
    const chart = new Chart(ctx, config);

    // ✅ Pass the chart instance (not the raw config)
    ctx.canvas.addEventListener('click', function () {
        showEnlargedChart(chart, modalTitle);
    });

    return chart;
}

// Function to show enlarged chart in modal
function showEnlargedChart(chartInstance, title) {
    if (typeof bootstrap === 'undefined') {
        console.error('Bootstrap is not loaded. Cannot show modal.');
        return;
    }

    const modalElement = document.getElementById('chartModal');
    if (!modalElement) {
        console.error('Modal element not found');
        return;
    }

    const modal = new bootstrap.Modal(modalElement);
    document.getElementById('chartModalLabel').textContent = title;

    // Destroy previous chart if exists
    const enlargedCanvas = document.getElementById('enlargedChart');
    if (!enlargedCanvas) {
        console.error('Enlarged canvas not found');
        return;
    }
    const existingChart = Chart.getChart(enlargedCanvas);
    if (existingChart) {
        existingChart.destroy();
    }

    // ✅ Clone from the live chart config
    const enlargedConfig = cloneConfig(chartInstance.config);

    // Adjust options for larger display
    if (enlargedConfig.options?.plugins) {
        // Adjust legend font
        if (enlargedConfig.options.plugins.legend) {
            enlargedConfig.options.plugins.legend = {
                ...enlargedConfig.options.plugins.legend,
                position: 'top',
                labels: {
                    ...enlargedConfig.options.plugins.legend.labels,
                    font: { size: 14 }
                }
            };
        }
        // Scale datalabels for enlarged chart
        if (enlargedConfig.options.plugins.datalabels) {
            enlargedConfig.options.plugins.datalabels = {
                ...enlargedConfig.options.plugins.datalabels,
                font: { ...enlargedConfig.options.plugins.datalabels.font, size: 14 }
            };
        }
    }

    // Render enlarged chart
    const enlargedCtx = enlargedCanvas.getContext('2d');
    new Chart(enlargedCtx, enlargedConfig);

    modal.show();
}

    // Function to handle filter toggle - Updated to position filter panel correctly
    function handleFilterToggle(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const targetId = this.getAttribute('data-target');
        const targetFilterPanel = document.getElementById(targetId);
        
        // Close all other filter panels
        document.querySelectorAll('.filter-panel').forEach(panel => {
            if (panel.id !== targetId) {
                panel.classList.remove('active');
            }
        });
        
        // Toggle current filter panel
        if (targetFilterPanel) {
            // Calculate position
            const buttonRect = this.getBoundingClientRect();
            
            // Find the immediate parent container that has position: relative
            let container = this.closest('.graph-card, .chart-section');
            if (!container) {
                // If not found, use the parent element of the filter panel
                container = targetFilterPanel.parentElement;
            }
            
            const containerRect = container.getBoundingClientRect();
            
            // Set position relative to the container
            targetFilterPanel.style.top = (buttonRect.bottom - containerRect.top + 5) + 'px';
            targetFilterPanel.style.left = (buttonRect.left - containerRect.left) + 'px';
            
            // Adjust if panel would go outside the container
            const panelWidth = 250; // Same as CSS width
            if (buttonRect.left + panelWidth > containerRect.right) {
                targetFilterPanel.style.left = (containerRect.right - panelWidth - containerRect.left) + 'px';
            }
            
            targetFilterPanel.classList.toggle('active');
        }
    }
    
    // Function to initialize all charts
    function initializeAllCharts() {
        // PMO Category Chart
     function createValueLabelsPlugin() {
    return {
        id: 'valueLabelsPlugin',
        afterDatasetsDraw(chart) {
            const { ctx, data, chartArea } = chart;
            const topClamp = chartArea.top + 14;
            ctx.save();
            data.datasets.forEach((ds, dsIndex) => {
                const meta = chart.getDatasetMeta(dsIndex);
                meta.data.forEach((point, i) => {
                    let val = ds.data[i];
                    if (val == null || isNaN(val)) return;

                    // ✅ Only add % for Adherence dataset
                    if (ds.label && ds.label.includes('%')) {
                        val = val + "%";
                    }

                    const pos = point.tooltipPosition ? point.tooltipPosition() : { x: point.x, y: point.y };
                    let y, color;
                    if (ds.type === 'bar') {
                        const yZero = chart.scales.y.getPixelForValue(0);
                        const barHeight = Math.abs(point.y - yZero);
                        y = point.y + (point.y < yZero ? -6 : 6);
                        if (barHeight < 20) y = point.y - 6;
                        color = '#000';
                    } else {
                        y = point.y - 12; 
                        color = ds.borderColor || '#000';
                    }
                    if (y < topClamp) y = topClamp;
                    ctx.font = '10px Segoe UI, Arial, sans-serif';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = color;
                    ctx.fillText(val, point.x, y);
                });
            });
            ctx.restore();
        }
    };
}

        // Initialize PMO Category Chart
        function createPMOCategoryChart() {
            const ctx = replacePlaceholderWithChart('pmoCategoryChart-container', 'pmoCategoryChart');
            const labels = ['CESS','Digital','Functional Skills','Professional Skills','Sustainability'];
            const raw = {{ category_metrics | tojson | safe }};
            const byCat = new Map(raw.map(d => [d.category, d]));
            const annualTarget = labels.map(c => Number(byCat.get(c)?.annual_target ?? 0));
            const ytdTarget    = labels.map(c => Number(byCat.get(c)?.ytd_target ?? 0));
            const ytdActual    = labels.map(c => Number(byCat.get(c)?.ytd_actual ?? 0));
            const adherence    = labels.map(c => Number(byCat.get(c)?.adherence ?? 0));
            
            const config = {
                type: 'bar',
                plugins: [createValueLabelsPlugin()],
                data: {
                    labels,
                    datasets: [
                        { label: 'SDC Annual Target', data: annualTarget, backgroundColor: 'rgba(54, 162, 235, 0.8)' },
                        { label: 'Target YTD Plan',   data: ytdTarget,    backgroundColor: 'rgba(255, 239, 128, 0.8)' },
                        { label: 'Actual YTD Coverage', data: ytdActual,  backgroundColor: 'rgba(102, 255, 102, 0.8)' },
                        {
                            label: 'YTD Adherence %',
                            data: adherence,
                            type: 'line',
                            borderColor: 'rgba(153, 51, 255, 1)',
                            borderWidth: 2,
                            yAxisID: 'percentageAxis',
                            tension: 0.3,
                            fill: false,
                            pointBackgroundColor: 'rgba(153, 51, 255, 1)'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                generateLabels(chart) {
                                    const base = Chart.defaults.plugins.legend.labels.generateLabels;
                                    const labels = base.call(this, chart);
                                    labels.forEach(l => {
                                        l.fillStyle = chart.data.datasets[l.datasetIndex].backgroundColor || chart.data.datasets[l.datasetIndex].borderColor;
                                        l.lineWidth = chart.data.datasets[l.datasetIndex].borderWidth || 0;
                                    });
                                    return labels;
                                }
                            }
                        },
                        // Title removed as it's already in HTML
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Counts' }
                        },
                        percentageAxis: {
                            position: 'right',
                            beginAtZero: true,
                            // Removed max: 100 to allow values above 100
                            ticks: { callback: v => v + "%" },
                            title: { display: true, text: 'Adherence %' },
                            grid: { drawOnChartArea: false }
                        }
                    }
                }
            };
            
            return createChartWithClickHandler(ctx, config, 'PMO Category Coverage YTD');
        }
        
        // Initialize SHE Category Chart
        function createSHECategoryChart() {
            const sheCtx = replacePlaceholderWithChart('sheCategoryChart-container', 'sheCategoryChart');
            const sheData = {{ category_metrics | tojson | safe }}.find(d => d.category === "SHE (Safety+Health)");
            
            const config = {
                type: 'bar',
                plugins: [createValueLabelsPlugin()],
                data: {
                    labels: ['SHE (Safety+Health)'],
                    datasets: [
                        { label: 'SDC Annual Target', data: [sheData.annual_target], backgroundColor: 'rgba(54, 162, 235, 0.8)' },
                        { label: 'Target YTD Plan',   data: [sheData.ytd_target],    backgroundColor: 'rgba(255, 239, 128, 0.8)' },
                        { label: 'Actual YTD Coverage', data: [sheData.ytd_actual],  backgroundColor: 'rgba(102, 255, 102, 0.8)' }
                    ]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                generateLabels(chart) {
                                    const base = Chart.defaults.plugins.legend.labels.generateLabels;
                                    const labels = base.call(this, chart);
                                    labels.forEach(l => {
                                        l.fillStyle = chart.data.datasets[l.datasetIndex].backgroundColor || chart.data.datasets[l.datasetIndex].borderColor;
                                        l.lineWidth = chart.data.datasets[l.datasetIndex].borderWidth || 0;
                                    });
                                    return labels;
                                }
                            }
                        },
                        // Title removed as it's already in HTML
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: { display: true, text: 'Counts' }
                        }
                    }
                }
            };
            
            return createChartWithClickHandler(sheCtx, config, 'SHE Category Coverage YTD');
        }
        
        // Initialize Training Category Charts
        const allData = {{ training_metrics | tojson }};
        function buildCategoryChart(category, filterId, searchId, selectAllId, clearAllId, containerId, canvasId, chartTitle) {
            const chartData = allData.filter(item => item.pmo_category === category);
            const filterPanel = document.getElementById(filterId);
            const filterOptions = document.getElementById(`filterOptions${filterId.replace('filter', '')}`);
            const searchBox = document.getElementById(searchId);
            const selectAllBtn = document.getElementById(selectAllId);
            const clearAllBtn = document.getElementById(clearAllId);
            const ctx = replacePlaceholderWithChart(containerId, canvasId);
            
            // Add direct event listener to the filter toggle button for this specific chart
            const filterToggleBtn = document.querySelector(`.filter-toggle[data-target="${filterId}"]`);
            if (filterToggleBtn) {
                // Remove any existing event listeners to avoid duplicates
                filterToggleBtn.removeEventListener('click', handleFilterToggle);
                // Add the event listener
                filterToggleBtn.addEventListener('click', handleFilterToggle);
            }
            
            // Ensure the filter panel is positioned relative to its parent container
            if (filterPanel && !filterPanel.parentElement.classList.contains('graph-card') && 
                !filterPanel.parentElement.classList.contains('chart-section')) {
                // Find the nearest parent with the appropriate class
                const parentContainer = filterPanel.closest('.graph-card, .chart-section');
                if (parentContainer) {
                    // Move the filter panel to be a direct child of the parent container
                    parentContainer.appendChild(filterPanel);
                }
            }
            
            function renderCheckboxes(filter = "") {
                filterOptions.innerHTML = "";
                const filteredData = chartData.filter(item => item.training_name.toLowerCase().includes(filter.toLowerCase()));
                filteredData.forEach((item, index) => {
                    const wrapper = document.createElement("label");
                    wrapper.className = "checkbox-wrapper";
                    const checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.value = item.training_name;
                    if (index < 3) checkbox.checked = true; // auto-select first 3
                    wrapper.appendChild(checkbox);
                    wrapper.appendChild(document.createTextNode(item.training_name));
                    filterOptions.appendChild(wrapper);
                });
            }
            
            renderCheckboxes();
            let chart = new Chart(ctx, {
                type: 'bar',
                plugins: [createValueLabelsPlugin()],
                data: { labels: [], datasets: [] },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: { display: false },
                        legend: {
                            position: 'top',
                            labels: {
                                generateLabels(chart) {
                                    const base = Chart.defaults.plugins.legend.labels.generateLabels;
                                    const labels = base.call(this, chart);
                                    labels.forEach(l => {
                                        l.fillStyle = chart.data.datasets[l.datasetIndex].backgroundColor || chart.data.datasets[l.datasetIndex].borderColor;
                                        l.lineWidth = chart.data.datasets[l.datasetIndex].borderWidth || 0;
                                    });
                                    return labels;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { precision: 0 },
                            title: { display: true, text: 'Counts' }
                        },
                        adherenceAxis: {
                            position: 'right',
                            beginAtZero: true,
                            // Removed max: 120 to allow values above 120
                            ticks: { callback: v => v + "%" },
                            grid: { drawOnChartArea: false },
                            title: { display: true, text: 'Adherence %' }
                        }
                    }
                }
            });
            
            function getChartData() {
                const selected = Array.from(filterOptions.querySelectorAll("input:checked")).map(cb => cb.value);
                return chartData.filter(item => selected.includes(item.training_name));
            }
            
            function updateChart() {
                const filtered = getChartData();
                chart.data.labels = filtered.map(item => item.training_name);
                chart.data.datasets = [
                    {
                        label: 'Annual Target',
                        data: filtered.map(i => i.annual_target),
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        barPercentage: 0.6,
                        categoryPercentage: 0.8
                    },
                    {
                        label: 'YTD Plan',
                        data: filtered.map(i => i.ytd_target),
                        backgroundColor: 'rgba(255, 239, 128, 0.8)', // light yellow
                        barPercentage: 0.6,
                        categoryPercentage: 0.8
                    },
                    {
                        label: ' Actual Coverage',
                        data: filtered.map(i => i.ytd_coverage),
                        backgroundColor: 'rgba(102, 255, 102, 0.8)', // green
                        barPercentage: 0.6,
                        categoryPercentage: 0.8
                    },
                    {
                        type: 'line',
                        label: 'Adherence (%)',
                        data: filtered.map(i => i.adherence),
                        borderColor: 'rgba(153, 51, 255, 1)', // purple
                        backgroundColor: 'rgba(153, 51, 255, 0.2)',
                        borderWidth: 3,
                        yAxisID: 'adherenceAxis',
                        tension: 0.3,
                        fill: false,
                        pointRadius: 6,
                        pointBackgroundColor: 'rgba(153, 51, 255, 1)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointHoverRadius: 8
                    }
                ];
                chart.update();
            }
            
            setTimeout(updateChart, 100);
            searchBox.addEventListener("input", e => renderCheckboxes(e.target.value));
            selectAllBtn.addEventListener("click", () => {
                filterOptions.querySelectorAll("input").forEach(cb => cb.checked = true);
                updateChart();
            });
            clearAllBtn.addEventListener("click", () => {
                filterOptions.querySelectorAll("input").forEach(cb => cb.checked = false);
                updateChart();
            });
            
            // Fix for apply filter button
            const applyFilterBtn = document.querySelector(`.apply-filter[data-target="${filterId}"]`);
            if (applyFilterBtn) {
                applyFilterBtn.addEventListener("click", () => {
                    updateChart();
                    if (filterPanel) {
                        filterPanel.classList.remove('active');
                    }
                });
            }
            
            filterOptions.addEventListener("change", updateChart);
            
            // Add click handler to show enlarged chart
            ctx.canvas.addEventListener('click', function() {
                // Create a copy of the current chart config for the modal
                const config = {
                    type: chart.config.type,
                    plugins: chart.config.plugins,
                    data: JSON.parse(JSON.stringify(chart.data)),
                    options: JSON.parse(JSON.stringify(chart.options))
                };
                showEnlargedChart(config, chartTitle);
            });
        }
        
        // Initialize Month-wise YTD Chart
        function createMonthwiseYTDChart() {
            const ctxMonth = replacePlaceholderWithChart('monthwiseYTDChart-container', 'monthwiseYTDChart');
            const rawMonth = {{ monthwise_metrics | tojson | safe }};
            const monthLabels    = rawMonth.map(d => d.month);
            const monthYtdTarget = rawMonth.map(d => Number(d.ytd_target ?? 0));
            const today = new Date();
            const currentMonthIndex = today.getMonth();
            const monthYtdCoverage = rawMonth.map((d, i) =>
                i <= currentMonthIndex - 3 ? Number(d.ytd_coverage ?? 0) : null
            );
            const monthAdherence = rawMonth.map((d, i) =>
                i <= currentMonthIndex - 3 ? Number(d.adherence ?? 0) : null
            );
            
            const config = {
                plugins: [createValueLabelsPlugin()],
                data: {
                    labels: monthLabels,
                    datasets: [
                        {
                            type: 'line',
                            label: 'YTD Plan',
                            data: monthYtdTarget,
                            borderColor: 'rgba(99, 102, 241, 1)',
                            backgroundColor: 'rgba(99, 102, 241, 0.2)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: false,
                            pointBackgroundColor: 'rgba(99, 102, 241, 1)',
                            pointRadius: 3,
                            pointHitRadius: 8,
                            spanGaps: true,
                            yAxisID: 'y'
                        },
                        {
                            type: 'bar',
                            label: 'YTD Coverage',
                            data: monthYtdCoverage,
                            backgroundColor: 'rgba(34, 197, 94, 0.7)',
                            borderColor: 'rgba(34, 197, 94, 1)',
                            borderWidth: 1,
                            yAxisID: 'y'
                        },
                        {
                            type: 'line',
                            label: 'Adherence %',
                            data: monthAdherence,
                            borderColor: 'rgba(234, 179, 8, 1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: false,
                            pointBackgroundColor: 'rgba(234, 179, 8, 1)',
                            pointRadius: 3,
                            pointHitRadius: 8,
                            spanGaps: false,
                            yAxisID: 'percentageAxis'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            fullSize: true,
                            labels: {
                                padding: 16,
                                generateLabels(chart) {
                                    const base = Chart.defaults.plugins.legend.labels.generateLabels;
                                    const labels = base.call(this, chart);
                                    labels.forEach(l => {
                                        l.lineWidth = 0;
                                        l.fillStyle = chart.data.datasets[l.datasetIndex].borderColor;
                                    });
                                    return labels;
                                }
                            }
                        },
                        tooltip: { enabled: true },
                        annotation: {
                            annotations: {
                                futureShade: {
                                    type: 'box',
                                    xMin: currentMonthIndex - 2.5,
                                    xMax: monthLabels.length - 0.5,
                                    yMin: 0,
                                    yMax: 'max',
                                    backgroundColor: 'rgba(200, 200, 200, 0.12)',
                                    borderWidth: 0
                                }
                            }
                        }
                    },
                    interaction: { mode: 'nearest', intersect: false },
                    layout: { padding: { top:5} },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grace: '15%',
                            title: { display: true, text: 'Counts' }
                        },
                        percentageAxis: {
                            position: 'right',
                            beginAtZero: true,
                            // Removed max: 100 to allow values above 100
                            grace: 5,
                            title: { display: true, text: 'Adherence %' },
                            grid: { drawOnChartArea: false }
                        }
                    }
                }
            };
            
            return createChartWithClickHandler(ctxMonth, config, 'Month-wise YTD Target vs Coverage vs Adherence');
        }
        
// Initialize SHE Donut Chart (with partial fill if not complete)
function createSHEDonutChart(containerId, canvasId, categoryMetrics) {
    const ctx = replacePlaceholderWithChart(containerId, canvasId);

    // Get SHE category only
    const sheData = categoryMetrics.find(d => d.category === 'SHE (Safety+Health)') || {};

    const eorYtdTarget = Number(sheData.eor_ytd_target ?? 0);   // Outer ring target
    const she6plus = Number(sheData.she_6plus_count ?? 0);      // Inner ring actual

    // Adherence % - not capped at 100
    const adherence = eorYtdTarget > 0
        ? ((she6plus / eorYtdTarget) * 100).toFixed(1)
        : 0;

    // Updated color coding based on new thresholds
    let adherenceColor = "#e74c3c"; // red for < 60
    if (adherence >= 90) {
        adherenceColor = "#27ae60"; // green for > 90
    } else if (adherence >= 60) {
        adherenceColor = "#f39c12"; // amber for 60-90
    }

    const config = {
        type: 'doughnut',
        data: {
            datasets: [
                {
                    label: 'EOR YTD Plan',
                    data: [
                        eorYtdTarget,                          // actual target
                        Math.max(0, (eorYtdTarget || 0) * 0.001) // tiny transparent filler
                    ],
                    backgroundColor: [
                        'rgba(14, 114, 255, 0.95)',  // blue (visible)
                        'rgba(0,0,0,0)'              // fully transparent filler
                    ],
                    borderColor: '#fff',
                    borderWidth: 1,
                    radius: '100%',
                    cutout: '65%'
                },
                {
                    label: 'SHE 6+ Hours',
                    data: [
                        she6plus,                                    // actual coverage
                        Math.max(0, eorYtdTarget - she6plus)         // remainder (invisible)
                    ],
                    backgroundColor: [
                        'rgba(0, 200, 70, 1)',  // green (visible)
                        'rgba(0,0,0,0)'         // fully transparent filler
                    ],
                    borderColor: '#fff',
                    borderWidth: 1,
                    radius: '100%',
                    cutout: '60%'
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        generateLabels(chart) {
                            return [
                                {
                                    text: "EOR YTD Plan",
                                    fillStyle: chart.data.datasets[0].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(0),
                                    datasetIndex: 0
                                },
                                {
                                    text: "SHE 6+ Hours",
                                    fillStyle: chart.data.datasets[1].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(1),
                                    datasetIndex: 1
                                }
                            ];
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            if (context.datasetIndex === 0 && context.dataIndex === 0) {
                                return "EOR YTD Target: " + context.parsed;
                            } else if (context.datasetIndex === 1 && context.dataIndex === 0) {
                                return "SHE 6+ Hours: " + context.parsed;
                            }
                            return null; // ✅ hide remainder tooltips
                        }
                    }
                },
                datalabels: {
                    color: '#ffffffff',
                    font: { weight: 'bold', size: 10 },
                    formatter: function(value, ctx) {
                        // ✅ hide labels for remainder slices
                        return ctx.dataIndex === 0 && value > 0 ? value : null;
                    }
                }
            }
        },
        plugins: [
            ChartDataLabels,
            {
                id: 'centerText',
                beforeDraw(chart) {
                    const { width, height, ctx } = chart;
                    ctx.save();
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';

                    // % adherence - not capped at 100
                    ctx.font = `bold ${Math.round(height / 16)}px Arial`;
                    ctx.fillStyle = adherenceColor; // Use updated color coding
                    ctx.fillText(
                        eorYtdTarget > 0 ? adherence + '%' : 'No Data',
                        width / 2,
                        height / 2 - 5
                    );

                    // subtitle
                    ctx.font = `normal ${Math.round(height / 36)}px Arial`;
                    ctx.fillStyle = '#555';
                    ctx.fillText(
                        'SHE 6+ Hours Adherence',
                        width / 2,
                        height / 2 + 20
                    );

                    ctx.restore();
                }
            }
        ]
    };

    return createChartWithClickHandler(ctx, config, 'SHE (Safety+Health) Hours Breakdown');
}

       
// Initialize 16-Hour Donut Chart
function create16HourDonutChart(containerId, canvasId, categoryMetrics, uniqueLearnersStats) {
    const ctx = replacePlaceholderWithChart(containerId, canvasId);

    // Get SHE category only
    const sheData = categoryMetrics.find(d => d.category === 'SHE (Safety+Health)') || {};

    const eorYtdTarget = Number(sheData.eor_ytd_target ?? 0);
    const completed16Count = Number(sheData.completed_16_count ?? 0);

    // Calculate adherence % - not capped at 100
    const adherence = eorYtdTarget > 0
        ? ((completed16Count / eorYtdTarget) * 100).toFixed(1)
        : 0;

    // Updated color coding based on new thresholds
    let adherenceColor = "#e74c3c"; // red for < 60
    if (adherence >= 90) {
        adherenceColor = "#27ae60"; // green for > 90
    } else if (adherence >= 60) {
        adherenceColor = "#f39c12"; // amber for 60-90
    }

    const config = {
        type: 'doughnut',
        data: {
            datasets: [
                {
                    label: 'EOR YTD Plan',
                    data: [eorYtdTarget], // ✅ only one slice
                    backgroundColor: ["rgba(14, 114, 255, 0.95)"],
                    borderColor: '#fff',
                    borderWidth: 1,
                    radius: '100%',
                    cutout: '65%'
                },
                {
                    label: '16-Hour Completions',
                    data: [
                        completed16Count,
                        Math.max(eorYtdTarget - completed16Count, 0) // invisible remainder
                    ],
                    backgroundColor: [
                        "rgba(0, 200, 70, 1)", // Green (actual)
                        "rgba(0,0,0,0)"        // Transparent remainder
                    ],
                    borderColor: '#fff',
                    borderWidth: 1,
                    radius: '100%',
                    cutout: '60%'
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        generateLabels(chart) {
                            // ✅ Only show actual datasets, ignore transparent slices
                            return [
                                {
                                    text: "EOR YTD Plan",
                                    fillStyle: chart.data.datasets[0].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(0),
                                    datasetIndex: 0
                                },
                                {
                                    text: "16-Hour Completions",
                                    fillStyle: chart.data.datasets[1].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(1),
                                    datasetIndex: 1
                                }
                            ];
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const bg = context.dataset.backgroundColor[context.dataIndex];
                            if (!bg || bg === "rgba(0,0,0,0)") return null; // skip transparent
                            if (context.datasetIndex === 0) {
                                return "EOR YTD Plan: " + context.parsed;
                            } else if (context.datasetIndex === 1 && context.dataIndex === 0) {
                                return "16-Hour Completions: " + context.parsed;
                            }
                            return null;
                        }
                    }
                },
                datalabels: {
                    color: '#ffffffff',
                    font: { weight: 'bold', size: 10 },
                    formatter: function(value, context) {
                        const bg = context.dataset.backgroundColor[context.dataIndex];
                        // ✅ Only show if visible + first slice
                        if (context.dataIndex !== 0) return null;
                        if (!value || bg === "rgba(0,0,0,0)") return null;
                        return value;
                    }
                }
            }
        },
        plugins: [
            ChartDataLabels,
            {
                id: 'centerText',
                beforeDraw(chart) {
                    const { width, height, ctx } = chart;
                    ctx.save();

                    ctx.font = `bold ${Math.round(height / 16)}px Arial`;
                    ctx.fillStyle = adherenceColor; // Use updated color coding
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(
                        eorYtdTarget > 0 ? adherence + '%' : 'No Data',
                        width / 2,
                        height / 2 - 5
                    );

                    ctx.font = `normal ${Math.round(height / 36)}px Arial`;
                    ctx.fillStyle = '#555';
                    ctx.textAlign = 'center';
                    ctx.fillText(
                        '16-Hour Completion Adherence',
                        width / 2,
                        height / 2 + 20
                    );

                    ctx.restore();
                }
            }
        ]
    };

    return createChartWithClickHandler(ctx, config, '16-Hour Completion Adherence');
}



        
// Initialize UL vs EOR Chart
function createULEORChart(containerId, canvasId, metrics) {
  const ctx = replacePlaceholderWithChart(containerId, canvasId);

  // Take YTD Target instead of total_eor_count
  const totalEOR = metrics.eor_ytd_target || 0; // UL YTD plan
  const ul = metrics.total_unique_learners || 0;

  // Adherence % - not capped at 100
  const adherence = totalEOR > 0 ? ((ul / totalEOR) * 100).toFixed(1) : 0;

  // Updated color coding based on new thresholds
  let adherenceColor = "#e74c3c"; // red for < 60
  if (adherence >= 90) {
    adherenceColor = "#27ae60"; // green for > 90
  } else if (adherence >= 60) {
    adherenceColor = "#f39c12"; // amber for 60-90
  }

  const config = {
    type: "doughnut",
    data: {
      datasets: [
        {
          // Outer ring – UL YTD plan
          label: "UL YTD Plan",
          data: [
            totalEOR,
            Math.max(0, (totalEOR || 0) * 0.001) // tiny transparent filler
          ],
          backgroundColor: [
            "rgba(14, 114, 255, 0.95)", // blue
            "rgba(0,0,0,0)"             // transparent
          ],
          borderColor: "#fff",
          borderWidth: 2,
          radius: "100%",
          cutout: "65%",
        },
        {
          // Inner ring – only actual unique learners
          label: "Actual Unique Learners",
          data: [
            ul,
            Math.max(0, totalEOR - ul) // remainder hidden
          ],
          backgroundColor: [
            "rgba(0, 200, 70, 1)", // green
            "rgba(0,0,0,0)"        // transparent
          ],
          borderColor: "#fff",
          borderWidth: 2,
          radius: "100%",
          cutout: "60%",
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: "top",
          labels: {
            usePointStyle: true,
            generateLabels(chart) {
              const data = chart.data;
              return [
                {
                  text: "UL YTD Plan",
                  fillStyle: data.datasets[0].backgroundColor[0],
                  hidden: !chart.isDatasetVisible(0),
                  datasetIndex: 0,
                },
                {
                  text: "Actual Unique Learners",
                  fillStyle: data.datasets[1].backgroundColor[0],
                  hidden: !chart.isDatasetVisible(1),
                  datasetIndex: 1,
                },
              ];
            },
          },
        },
        tooltip: {
          callbacks: {
            label: function (context) {
              if (context.datasetIndex === 0 && context.dataIndex === 0) {
                return "UL YTD Plan: " + context.parsed;
              } else if (context.datasetIndex === 1 && context.dataIndex === 0) {
                return "Actual Unique Learners: " + context.parsed;
              }
              return null; // hide remainder tooltip
            },
          },
        },
        datalabels: {
          color: "#ffffffff",
          font: { weight: "bold", size: 10 },
          formatter: function (value, ctx) {
            return ctx.dataIndex === 0 && value > 0 ? value : null; // only main slice
          },
        },
      },
    },
    plugins: [
      ChartDataLabels,
      {
        id: "centerText",
        beforeDraw(chart) {
          const { ctx, chartArea } = chart;
          const centerX = (chartArea.left + chartArea.right) / 2;
          const centerY = (chartArea.top + chartArea.bottom) / 2;
          ctx.save();
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";

          // Big % number - not capped at 100
          ctx.font = `bold ${Math.round(chart.height / 14)}px Arial`;
          ctx.fillStyle = adherenceColor; // Use updated color coding
          ctx.fillText(
            totalEOR > 0 ? adherence + "%" : "No Data",
            centerX,
            centerY - 12
          );

          // Label below
          ctx.font = `normal ${Math.round(chart.height / 40)}px Arial`;
          ctx.fillStyle = "#555";
          ctx.fillText("UL vs YTD Plan", centerX, centerY + 18);
          ctx.restore();
        },
      },
    ],
  };

  return createChartWithClickHandler(
    ctx,
    config,
    "Actual Unique Learners vs UL YTD Plan"
  );
}


        
// Initialize YTD Plan vs Coverage Chart
function createAnnualYTDChart(containerId, canvasId, metrics) {
    const ctx = replacePlaceholderWithChart(containerId, canvasId);
    const ytdPlan = metrics.ytd_target || 0;   // YTD Plan
    const actualCoverage = metrics.ytd_coverage || 0; // Actual Coverage

    // Adherence % - not capped at 100
    const adherence = ytdPlan > 0 ? ((actualCoverage / ytdPlan) * 100).toFixed(1) : 0;
    
    // Updated color coding based on new thresholds
    const adherenceColor =
        adherence >= 90 ? "#27ae60" : adherence >= 60 ? "#f39c12" : "#e74c3c";

    // Ensure remainder doesn't go negative
    const remaining = Math.max(ytdPlan - actualCoverage, 0);

    const config = {
        type: "doughnut",
        data: {
            datasets: [
                {
                    label: "YTD Plan",
                    data: [ytdPlan],
                    backgroundColor: ["rgba(14, 114, 255, 0.95)"],
                    borderColor: "#fff",
                    borderWidth: 2,
                    radius: "100%",
                    cutout: "65%"
                },
                {
                    label: "Actual Coverage",
                    // ✅ 2 slices: coverage + empty space
                    data: [actualCoverage, remaining],
                    backgroundColor: [
                        "rgba(0, 200, 70, 1)", // coverage
                        "rgba(0,0,0,0)"       // invisible empty slice
                    ],
                    borderColor: "#fff",
                    borderWidth: 2,
                    radius: "100%",
                    cutout: "60%"
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: "top",
                    labels: {
                        usePointStyle: true,
                        generateLabels(chart) {
                            const data = chart.data;
                            return [
                                {
                                    text: "YTD Plan",
                                    fillStyle: data.datasets[0].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(0),
                                    datasetIndex: 0
                                },
                                {
                                    text: "Actual Coverage",
                                    fillStyle: data.datasets[1].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(1),
                                    datasetIndex: 1,
                                    index: 0
                                }
                            ];
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            // ✅ Only show coverage tooltip
                            if (context.datasetIndex === 0) {
                                return "YTD Plan: " + context.parsed;
                            } else if (context.datasetIndex === 1 && context.dataIndex === 0) {
                                return "Actual Coverage: " + context.parsed;
                            }
                            return null;
                        }
                    }
                },
                datalabels: {
                    color: "#ffffffff",
                    font: { weight: "bold", size: 10 },
                    formatter: function (value, context) {
                        // ✅ Only show label for coverage, not empty
                        return context.dataIndex === 0 && value > 0 ? value : null;
                    }
                }
            }
        },
        plugins: [
            ChartDataLabels,
            {
                id: "centerText",
                beforeDraw(chart) {
                    const { ctx, chartArea } = chart;
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    ctx.save();
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";
                    ctx.font = `bold ${Math.round(chart.height / 14)}px Arial`;
                    ctx.fillStyle = adherenceColor; // Use updated color coding
                    ctx.fillText(
                        ytdPlan > 0 ? adherence + "%" : "No Data",
                        centerX,
                        centerY - 12
                    );
                    ctx.font = `normal ${Math.round(chart.height / 40)}px Arial`;
                    ctx.fillStyle = "#555";
                    ctx.fillText("Actual Coverage vs YTD Plan", centerX, centerY + 18);
                    ctx.restore();
                }
            }
        ]
    };

    return createChartWithClickHandler(ctx, config, "YTD Plan vs Actual Coverage");
}
        
    // NEW: Function to create PL Category Donut Chart (clean, no "Remaining")
function createPLCategoryDonutChart(containerId, canvasId, categoryData, categoryName) { 
    const ctx = replacePlaceholderWithChart(containerId, canvasId);
    
    // Extract data
    const ytdPlan = Number(categoryData.ytd_target || 0);        // ✅ renamed
    const actualCoverage = Number(categoryData.ytd_coverage || 0); // ✅ renamed

    // Adherence % - not capped at 100
    const adherence = ytdPlan > 0 ? ((actualCoverage / ytdPlan) * 100).toFixed(1) : 0;
    
    // Updated color coding based on new thresholds
    let adherenceColor = "#e74c3c"; // red for < 60
    if (adherence >= 90) {
        adherenceColor = "#27ae60"; // green for > 90
    } else if (adherence >= 60) {
        adherenceColor = "#f39c12"; // amber for 60-90
    }
    
    const config = {
        type: "doughnut",
        data: {
            datasets: [
                {
                    label: "YTD Plan",
                    data: [
                        ytdPlan,
                        Math.max(0, (ytdPlan || 0) * 0.001) // tiny invisible filler
                    ],
                    backgroundColor: [
                        "rgba(14, 114, 255, 0.95)", // Blue
                        "rgba(0,0,0,0)"             // Transparent filler
                    ],
                    borderColor: "#fff",
                    borderWidth: 2,
                    radius: "100%",
                    cutout: "65%"
                },
                {
                    label: "Actual Coverage",
                    data: [
                        actualCoverage,
                        Math.max(0, ytdPlan - actualCoverage)
                    ],
                    backgroundColor: [
                        "rgba(0, 200, 70, 1)",  // Green
                        "rgba(0,0,0,0)"         // Transparent filler
                    ],
                    borderColor: "#fff",
                    borderWidth: 2,
                    radius: "100%",
                    cutout: "60%"
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: "top",
                    labels: {
                        usePointStyle: true,
                        generateLabels(chart) {
                            return [
                                {
                                    text: "YTD Plan",
                                    fillStyle: chart.data.datasets[0].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(0),
                                    datasetIndex: 0
                                },
                                {
                                    text: "Actual Coverage",
                                    fillStyle: chart.data.datasets[1].backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(1),
                                    datasetIndex: 1
                                }
                            ];
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            if (context.datasetIndex === 0 && context.dataIndex === 0) {
                                return "YTD Plan: " + context.parsed;
                            } else if (context.datasetIndex === 1 && context.dataIndex === 0) {
                                return "Actual Coverage: " + context.parsed;
                            }
                            return null; // ✅ hide remainder
                        }
                    }
                },
                datalabels: {
                    color: "#ffffffff",
                    font: { weight: "bold", size: 10 },
                    formatter: function(value, ctx) {
                        return ctx.dataIndex === 0 && value > 0 ? value : null; // ✅ only main slice
                    }
                }
            }
        },
        plugins: [
            ChartDataLabels,
            {
                id: "centerText",
                beforeDraw(chart) {
                    const { ctx, chartArea } = chart;
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    ctx.save();
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";
                    
                    // % adherence - not capped at 100
                    ctx.font = `bold ${Math.round(chart.height / 14)}px Arial`;
                    ctx.fillStyle = adherenceColor; // Use updated color coding
                    ctx.fillText(
                        ytdPlan > 0 ? adherence + "%" : "No Data",
                        centerX,
                        centerY - 12
                    );
                    
                    // subtitle
                    ctx.font = `normal ${Math.round(chart.height / 40)}px Arial`;
                    ctx.fillStyle = "#555";
                    ctx.fillText("Actual Coverage vs YTD Plan", centerX, centerY + 18);
                    ctx.restore();
                }
            }
        ]
    };
    
    return createChartWithClickHandler(ctx, config, `${categoryName} Category Metrics`);
}


        
function createEmployeeGroupChart(containerId, canvasId, eorStats) {
    const ctx = replacePlaceholderWithChart(containerId, canvasId);

    const groups = ["Permanent", "Trainee", "Temporary"];
    const groupCounts = groups.map(g => eorStats.employee_category_breakdown[g]?.total_eor_count || 0);

    const colors = [
        "rgba(54,162,235,1)",  // Blue - Permanent
        "rgba(255,159,64,1)",  // Orange - Trainee
        "rgba(0,200,70,1)"     // Green - Temporary
    ];

    const datasets = groupCounts.map((count, i) => ({
        label: groups[i], 
        data: [count],
        backgroundColor: [colors[i]],
        borderColor: "#fff",
        borderWidth: 2,
        radius: "100%",
        
    }));

    const config = {
        type: "doughnut",
        data: { datasets: datasets },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: "top",
                    labels: {
                        usePointStyle: true,
                        font: { size: 12, weight: "bold" },
                        generateLabels(chart) {
                            return chart.data.datasets.map((dataset, idx) => ({
                                text: dataset.label,
                                fillStyle: colors[idx],
                                hidden: !chart.isDatasetVisible(idx),
                                datasetIndex: idx
                            }));
                        }
                    }
                },
                tooltip: {
                    enabled: true,
                    callbacks: {
                        label: function(context) {
                            // Show only the hovered ring label and value
                            const label = context.dataset.label || '';
                            const value = context.raw;
                            return `${label}: ${value} employees`;
                        },
                        title: function() { return ''; } // remove extra title
                    }
                },
                datalabels: {
                    color: "#ffffffff",
                    font: { weight: "bold", size: 12 },
                    formatter: function(value) { return value > 0 ? value : null; }
                }
            }
        },
        plugins: [
            ChartDataLabels
        ]
    };

    return createChartWithClickHandler(ctx, config, "Employee Group Distribution");
}


        
        // Initialize EOR Donut Chart
        function buildEORDonutChart(containerId, canvasId, allData) {
            const ctx = replacePlaceholderWithChart(containerId, canvasId);
            let chartInstance = null;
            
            function renderEORChart(selectedCategories) {
                let totalEOR = allData.total_eor_count;
                let maleCount = 0;
                let femaleCount = 0;
                let centerText = "All EOR count.";
                
                // Apply filters
                if (selectedCategories.length > 0 && !selectedCategories.includes("All")) {
                    totalEOR = 0;
                    maleCount = 0;
                    femaleCount = 0;
                    selectedCategories.forEach(cat => {
                        if (allData.employee_category_breakdown[cat]) {
                            totalEOR += allData.employee_category_breakdown[cat].total_eor_count;
                            maleCount += allData.employee_category_breakdown[cat].male_count;
                            femaleCount += allData.employee_category_breakdown[cat].female_count;
                        }
                    });
                    centerText = `${selectedCategories.join(", ")} EOR count.`;
                } else {
                    Object.values(allData.employee_category_breakdown).forEach(v => {
                        maleCount += v.male_count;
                        femaleCount += v.female_count;
                    });
                }
                
                if (chartInstance) chartInstance.destroy();
                
                const config = {
                    type: 'doughnut',
                    data: {
                        datasets: [
                            {
                                label: 'EOR Count',
                                data: [totalEOR],
                                backgroundColor: ['rgba(255, 235, 59, 1)'], // yellow
                                borderWidth: 1
                            },
                            {
                                label: 'Gender Breakdown',
                                data: [maleCount, femaleCount],
                                backgroundColor: [
                                    'rgba(100, 180, 246, 1)', // blue
                                    'rgba(244, 143, 177, 1)'  // pink
                                ],
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '60%',
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    generateLabels(chart) {
                                        const data = chart.data;
                                        return [
                                            {
                                                text: "EOR Count",
                                                fillStyle: data.datasets[0].backgroundColor[0],
                                                hidden: !chart.isDatasetVisible(0),
                                                datasetIndex: 0
                                            },
                                            {
                                                text: "Male",
                                                fillStyle: data.datasets[1].backgroundColor[0],
                                                hidden: !chart.isDatasetVisible(1),
                                                datasetIndex: 1,
                                                index: 0
                                            },
                                            {
                                                text: "Female",
                                                fillStyle: data.datasets[1].backgroundColor[1],
                                                hidden: !chart.isDatasetVisible(1),
                                                datasetIndex: 1,
                                                index: 1
                                            }
                                        ];
                                    }
                                },
                                onClick(e, legendItem, legend) {
                                    const chart = legend.chart;
                                    if (legendItem.datasetIndex !== undefined) {
                                        const dataset = chart.getDatasetMeta(legendItem.datasetIndex);
                                        if (legendItem.index !== undefined) {
                                            dataset.data[legendItem.index].hidden =
                                                !dataset.data[legendItem.index].hidden;
                                        } else {
                                            chart.setDatasetVisibility(
                                                legendItem.datasetIndex,
                                                !chart.isDatasetVisible(legendItem.datasetIndex)
                                            );
                                        }
                                        chart.update();
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        if (context.datasetIndex === 0) {
                                            return `EOR Count: ${context.raw}`;
                                        } else if (context.datasetIndex === 1) {
                                            return context.dataIndex === 0
                                                ? `Male: ${context.raw}`
                                                : `Female: ${context.raw}`;
                                        }
                                    }
                                }
                            }
                        }
                    },
                    plugins: [
                        {
                            id: 'centerText',
                            afterDraw(chart) {
                                const {ctx, chartArea: {left, right, top, bottom}} = chart;
                                ctx.save();
                                ctx.font = '12px Arial'; // Reduced font size by 2px
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';
                                ctx.fillText(centerText, (left + right) / 2, (top + bottom) / 2);
                            }
                        },
                        {
                            id: 'labelsInsideRings',
                            afterDatasetsDraw(chart) {
                                const {ctx} = chart;
                                ctx.save();
                                ctx.font = 'bold 10px Arial'; // Reduced font size by 2px
                                ctx.fillStyle = '#000';
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';
                                chart.data.datasets.forEach((dataset, i) => {
                                    // skip hidden datasets
                                    if (!chart.isDatasetVisible(i)) return;
                                    const meta = chart.getDatasetMeta(i);
                                    meta.data.forEach((arc, index) => {
                                        // skip hidden slices
                                        if (arc.hidden) return;
                                        const value = dataset.data[index];
                                        if (value > 0) {
                                            const pos = arc.tooltipPosition();
                                            ctx.fillText(value, pos.x, pos.y);
                                        }
                                    });
                                });
                            }
                        }
                    ]
                };
                
                chartInstance = createChartWithClickHandler(ctx, config, 'EOR Count by Employee Category');
            }
            
            // Build filter checkboxes dynamically
            const filterContainer = document.getElementById('filterOptionsEOR');
            filterContainer.innerHTML = `
                <label><input type="checkbox" value="All" checked> All</label><br>
            `;
            Object.keys(allData.employee_category_breakdown).forEach(cat => {
                filterContainer.innerHTML += `
                    <label><input type="checkbox" value="${cat}"> ${cat}</label><br>
                `;
            });
            
            // Select All / Clear All buttons
            document.getElementById('selectAllEOR').addEventListener('click', () => {
                filterContainer.querySelectorAll('input').forEach(cb => cb.checked = true);
            });
            document.getElementById('clearAllEOR').addEventListener('click', () => {
                filterContainer.querySelectorAll('input').forEach(cb => cb.checked = false);
            });
            
            // Search filter
            document.getElementById('searchEOR').addEventListener('input', function() {
                const term = this.value.toLowerCase();
                filterContainer.querySelectorAll('label').forEach(lbl => {
                    lbl.style.display = lbl.textContent.toLowerCase().includes(term) ? '' : 'none';
                });
            });
            
            // Apply filter button
            document.querySelector('#filterEOR .apply-filter').addEventListener('click', () => {
                const selected = Array.from(filterContainer.querySelectorAll('input:checked')).map(cb => cb.value);
                renderEORChart(selected);
            });
            
            // Initial render with All
            renderEORChart(["All"]);
        }
        
        // Initialize all charts
        createPMOCategoryChart();
        createSHECategoryChart();
        createMonthwiseYTDChart();
        
        // Initialize training category charts
        buildCategoryChart("CESS", "filterCESS", "searchCESS", "selectAllCESS", "clearAllCESS", "chartCESS-container", "chartCESS", "CESS Training Coverage YTD");
        buildCategoryChart("Digital", "filterDigital", "searchDigital", "selectAllDigital", "clearAllDigital", "chartDigital-container", "chartDigital", "Digital Training Coverage YTD");
        buildCategoryChart("Functional Skills", "filterFS", "searchFS", "selectAllFS", "clearAllFS", "chartFS-container", "chartFS", "Functional Skills Training Coverage YTD");
        buildCategoryChart("Professional Skills", "filterPS", "searchPS", "selectAllPS", "clearAllPS", "chartPS-container", "chartPS", "Professional Skills Training Coverage YTD");
        buildCategoryChart("SHE (Safety+Health)", "filterSHE", "searchSHE", "selectAllSHE", "clearAllSHE", "chartSHE-container", "chartSHE", "SHE (Safety+Health) Training Coverage YTD");
        buildCategoryChart("Sustainability", "filterSust", "searchSust", "selectAllSust", "clearAllSust", "chartSust-container", "chartSust", "Sustainability Training Coverage YTD");
        
        // Initialize donut charts
        const rawSHEChart = {{ category_metrics | tojson | safe }};
        createSHEDonutChart('sheStackedChart-container', 'sheStackedChart', rawSHEChart);
        
        // Initialize 16-Hour Donut Chart with only SHE + PMO data and single 16-hour count
        const metrics = {{ unique_learners_stats | default({}) | tojson | safe }};
        create16HourDonutChart('16HourChart-container', '16HourChart', rawSHEChart, metrics);
        
        createULEORChart('ulEorChart-container', 'ulEorChart', metrics);
        
        // NEW: Initialize Annual Target vs YTD Coverage Chart
        // Handle the case where annual_ytd_metrics is undefined
        let annualYtdMetrics = {{ annual_metrics | tojson | safe }};
        if (typeof annualYtdMetrics === 'undefined' || annualYtdMetrics === null) {
            // Provide default values if the data is not available
            annualYtdMetrics = {
                annual_target: 0,
                ytd_coverage: 0,
                ytd_target: 0,
                month_index: 0
            };
        }
        createAnnualYTDChart('annualYtdChart-container', 'annualYtdChart', annualYtdMetrics);
        
        // NEW: Initialize PL Category Donut Charts
        const plCategoryCounts = {{ pl_category_counts | tojson | safe }};
        createPLCategoryDonutChart('pl1Chart-container', 'pl1Chart', plCategoryCounts.PL1 || {}, 'PL1');
        createPLCategoryDonutChart('pl2Chart-container', 'pl2Chart', plCategoryCounts.PL2 || {}, 'PL2');
        createPLCategoryDonutChart('pl3Chart-container', 'pl3Chart', plCategoryCounts.PL3 || {}, 'PL3');
        
        const eorData = {{ eor_stats | tojson }};
        buildEORDonutChart('chartEOR-container', 'chartEOR', eorData);
        
        // NEW: Initialize Employee Group Bar Chart
        createEmployeeGroupChart('employeeGroupChart-container', 'employeeGroupChart', eorData);
        
        // Setup filter toggle functionality
        document.querySelectorAll('.filter-toggle').forEach(button => {
            // Skip buttons that are already handled by buildCategoryChart
            if (!button.getAttribute('data-target').startsWith('filter') || 
                !['filterCESS', 'filterDigital', 'filterFS', 'filterPS', 'filterSHE', 'filterSust'].includes(button.getAttribute('data-target'))) {
                
                // Remove any existing event listeners to avoid duplicates
                button.removeEventListener('click', handleFilterToggle);
                // Add the event listener
                button.addEventListener('click', handleFilterToggle);
            }
        });
        
        // Close filter panels when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('.filter-panel') && !event.target.closest('.filter-toggle')) {
                document.querySelectorAll('.filter-panel').forEach(panel => {
                    panel.classList.remove('active');
                });
            }
        });
    }
    
    // Start lazy loading charts after page load
    window.addEventListener('load', () => {
        // Add a small delay to ensure the page is fully rendered
        setTimeout(initializeCharts, 500);
    });
</script>
    
    <script src="{{ url_for('static', filename='JS/viewmaster.js') }}"></script>
</body>
</html>